"""
Django settings for Talentwave project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
from drf_yasg import openapi
from django.conf import settings
from decouple import Csv, config
import cloudinary


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("PROJECTSECRET", default="mysecret")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    # Libraries
    "daphne",
    "drf_yasg",
    "channels",
    "cloudinary",
    "cloudinary_storage",
    "debug_toolbar",
    "rest_framework",
    "rest_framework_simplejwt",
    "phonenumbers",
    "oauth2_provider",
    "social_django",
    "drf_social_oauth2",
    "allauth",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.github",
    "allauth.socialaccount.providers.google",  # end
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Django apps
    "authentication",
    "post",
    "company",
    "chat",
]


ASGI_APPLICATION = "Talentwave.asgi.application"
WSGI_APPLICATION = "Talentwave.wsgi.application"


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "oauth2_provider.middleware.OAuth2TokenMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "social_django.middleware.SocialAuthExceptionMiddleware",
]

ROOT_URLCONF = "Talentwave.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
            ],
        },
    },
]


TEMPLATE_CONTEXT_PROCESSORS = (
    "django.core.context_processors.request",
    "allauth.account.context_processors.account",
    "allauth.socialaccount.context_processors.socialaccount",
)

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth` 'Oauth2'
    "rest_framework_simplejwt.backends.TokenBackend",
    "django.contrib.auth.backends.ModelBackend",
    # `oauth2` specific authentication methods, such as login by e-mail
    # "social_core.backends.google.GoogleOAuth2",
    # "allauth.account.auth_backends.AuthenticationBackend",
)

# Provider specific settings
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = (
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/userinfo.profile",
)


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "talentwavedb",
        "USER": "postgres",
        "PASSWORD": config("DBPASSWORD", Csv(cast=int)),
        "HOST": config("HOST", default="localhost"),
        "PORT": config("PORT", default=5432),
    }
}


AUTH_USER_MODEL = "authentication.User"


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


INTERNAL_IPS = [
    "127.0.0.1:7000",
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:7000",  # Replace with your frontend URL
]


DEBUG_TOOLBAR_PANELS = [
    "debug_toolbar.panels.history.HistoryPanel",
    "debug_toolbar.panels.versions.VersionsPanel",
    "debug_toolbar.panels.timer.TimerPanel",
    "debug_toolbar.panels.settings.SettingsPanel",
    "debug_toolbar.panels.headers.HeadersPanel",
    "debug_toolbar.panels.request.RequestPanel",
    "debug_toolbar.panels.sql.SQLPanel",
    "debug_toolbar.panels.staticfiles.StaticFilesPanel",
    "debug_toolbar.panels.templates.TemplatesPanel",
    "debug_toolbar.panels.cache.CachePanel",
    "debug_toolbar.panels.signals.SignalsPanel",
    "debug_toolbar.panels.redirects.RedirectsPanel",
    "debug_toolbar.panels.profiling.ProfilingPanel",
]


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTStatelessUserAuthentication",
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",  # django-oauth-toolkit >= 1.0.0
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_THROTTLE_CLASSES": [
        # "post.throttling.OnePostPerDay",
        # "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        # "one_post_per_day": "1/day",
    },
    "DEFAULT_PAGINATION_CLASS": {
        "rest_framework.pagination.PageNumberPagination",
    },
}

DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=10),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=10),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
}


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_HOST_USER = config("APP_ID")
EMAIL_HOST_PASSWORD = config("APP_PASSWD")
EMAIL_USE_TLS = True
EMAIL_REPLY = config("EMAIL_REPLY")

# social custom authentication settings
AUTHENTICATION_BACKENDS = (
    # "rest_framework."
    "django.contrib.auth.backends.ModelBackend",
    # "rest_framework_simplejwt.backends.TokenBackend",
    "oauth2_provider.backends.OAuth2Backend",
    "social_core.backends.google.GoogleOAuth2",
    # 'drf_social_oauth2.backends.DjangoOAuth2',
)

LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "home"
LOGOUT_URL = "logout"
LOGOUT_REDIRECT_URL = "login"

SOCIAL_AUTH_GOOGLE_OAUTH_KEY = config("GOOGLE_CLIENT_ID")
SOCIAL_AUTH_GOOGLE_OAUTH_SECRET = config("GOOGLE_CLIENT_SECRET")


SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": SOCIAL_AUTH_GOOGLE_OAUTH_KEY,
            "secret": SOCIAL_AUTH_GOOGLE_OAUTH_SECRET,
            "key": "",
        }
    }
}


SWAGGER_SETTINGS = {
    "DEFAULT_INFO": {
        "title": "Talent Wave",
        "description": "API documentation for Talent Wave",
        "version": "1.0v",
        "contact": {
            "name": "Job portal",
            "url": "https://talentwave.org",
            "email": "vaishnavprabhakarkoo@gmail.com",
        },
    },
    "SERVE_INCLUDE_SCHEMA": True,
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "in": "header",
            "name": "Authorization",
            "type": "apiKey",
        },
    },
}

# gemini configuration
AI_SECRET_KEY = config("AI_KEY")


# clourdinary cloud storage configuration
cloudinary.config(
    cloud_name="darygrbe3",
    api_key=config("CLOUDINARY_KEY"),
    api_secret=config("CLOUDINARY_SECRET"),
    secure=True,
)

CLOUDINARY_STORAGE = {
    "CLOUD_NAME": "darygrbe3",
    "API_KEY": config("CLOUDINARY_KEY"),
    "API_SECRET": config("CLOUDINARY_SECRET"),
    "SECURE": True,
}


# django channel layer configuration
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
        "MIDDLEWARE": "chat.middleware.ChatMiddleware",
    }
}


# Redis for Django's default cache
CACHE_TTL = 60 * 60  # 60 minutes
CACHE_MIDDLEWARE_ALIAS = "default"
CACHE_MIDDLEWARE_SECONDS = CACHE_TTL
